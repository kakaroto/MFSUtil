#!/bin/sh

FILENAME=$1
OUTPUT=$2
MFS_START=0xa8000
MFS_SIZE=0x64000

if [[ "$FILENAME" == "" || "$OUTPUT" == "" ]] ; then
	echo "Usage: $0 input.rom output.rom"
	echo "ct filename must be 'ct'"
	exit
fi

# Extract the MFS partition from the ME image
ifdtool  -x $FILENAME
dd if=flashregion_2_intel_me.bin of=MFS.part bs=1 skip=$(($MFS_START)) count=$(($MFS_SIZE))

# Extract file number 7 (fitc.cfg)
../MFSUtil.py -m MFS.part -x -i 7 -o 7.cfg

# Remove the /home/bup/ct file from it
../MFSUtil.py -c 7.cfg -r -f /home/bup/ct -o 7.cfg.noct
rm 7.cfg

# Add the new ct file as /home/bup/ct
../MFSUtil.py -c 7.cfg.noct --add ct --alignment 2 --mode ' ---rwxr-----' --opt '?--F' --uid 3 --gid 351 -f /home/bup/ct -o fitc.cfg
rm 7.cfg.noct

# Delete file id 8 (home) from the MFS partition
../MFSUtil.py -m MFS.part -r -i 8 -o MFS.no8
rm MFS.part

# Delete file id 7 (fitc.cfg) from the MFS partition
../MFSUtil.py -m MFS.no8 -r -i 7 -o MFS.no7
rm MFS.no8

# Add the modified fitc.cfg into the MFS partition
../MFSUtil.py -m MFS.no7 -a fitc.cfg --deoptimize -i 7 -o MFS.new
rm fitc.cfg MFS.no7

# Recreate the the ME image
dd if=flashregion_2_intel_me.bin of=me_before_mfs.bin bs=1 count=$(($MFS_START))
dd if=flashregion_2_intel_me.bin of=me_after_mfs.bin bs=1 skip=$(($MFS_START + $MFS_SIZE))
rm flashregion_*.bin
cat me_before_mfs.bin MFS.new me_after_mfs.bin > me_with_bup_ct.bin
rm me_before_mfs.bin MFS.new me_after_mfs.bin

# Recreate the BIOS firmware
ifdtool -i ME:me_with_bup_ct.bin $FILENAME
rm me_with_bup_ct.bin
mv $FILENAME.new $OUTPUT

# Enable DCI and HAP bits
python -c "print('Enabling DCI and HAP in PCH Strap 0')
with open('$OUTPUT', 'r+b') as f:
    f.seek(0x102, 0)
    f.write(chr(0x03))
"
